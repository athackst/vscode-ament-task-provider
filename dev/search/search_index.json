{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ROS 2 Ament Task Provider","text":"<p>Provides problem matchers for use with ROS 2 projects using the ament build system.</p>"},{"location":"#installation","title":"Installation","text":"<p>You can grab this from the Visual Studio Code Marketplace or simply search for \"ament task provider\" in the extensions tab of VS Code.</p>"},{"location":"#features","title":"Features","text":"<p>Provides the following problem matchers:</p> <ul> <li>$ament-cpplint \u2014 adds errors and warnings reported by ament_cpplint</li> <li>$ament-cppcheck \u2014 adds errors and warnings reported by ament_cppcheck</li> <li>$ament-lint-cmake \u2014 adds errors and warnings reported by ament_lint_cmake</li> <li>$ament-flake8 \u2014 adds errors and warnings reported by ament_flake8</li> <li>$ament-pep257 \u2014 adds errors and warnings reported by ament_pep257</li> <li>$ament-xmllint \u2014 adds errors and warnings reported by ament_xmllint</li> </ul>"},{"location":"#usage","title":"Usage","text":"<p>Prerequiesite You must have the ament linters installed on your system for the appropriate linter to run.</p> <pre><code>sudo apt-get install ros-$ROS_DISTRO-ament-lint\n</code></pre> <p>From the task panel select ament and then the linter you'd like to run.</p> <p>That's it!</p>"},{"location":"#tasksjson","title":"tasks.json","text":"<p>You can also save the configuration within your workspace like so:</p> <p>.vscode/tasks.json</p> <pre><code>{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"type\": \"ament\",\n      \"task\": \"cppcheck\", // The name of the problem matcher\n      \"path\": \"src/\", // The path to your source files\n      \"commandOptions\": \"\", // Optional additional command line options\n      \"problemMatcher\": [\n        \"$ament_cppcheck\" // the corresponding problem matcher - can be used independently\n      ],\n      \"label\": \"ament: cppcheck\"\n    }\n  ]\n}\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>Want to contribute to this plugin! See Contributing for development details.</p>"},{"location":"#license","title":"License","text":"<p>This software is licensed under Apache 2.0.</p>"},{"location":"#attributions","title":"Attributions","text":"<p>Leaf icons created by Freepik - Flaticon</p>"},{"location":"CONTRIBUTING/","title":"Contributing","text":"<p>I love your input! I want to make contributing to this project as easy and transparent as possible, whether it's:</p> <ul> <li>Reporting a bug</li> <li>Discussing the current state of the code</li> <li>Submitting a fix</li> <li>Proposing new features</li> <li>Becoming a maintainer</li> </ul>"},{"location":"CONTRIBUTING/#develop-using-vscode","title":"Develop using VSCode","text":""},{"location":"CONTRIBUTING/#whats-in-the-folder","title":"What's in the folder","text":"<ul> <li><code>package.json</code> - this is the manifest file that defines the list of extensions of the extension pack.</li> <li><code>src/extension.ts</code> - this is the entry point of the extension</li> <li><code>src/amentTaskProvider.ts</code> - this is provides the ament tasks</li> <li><code>tests/problem-matcher.test.ts</code> - this is the testing script</li> </ul>"},{"location":"CONTRIBUTING/#get-up-and-running-straight-away","title":"Get up and running straight away","text":"<ul> <li>Press <code>F5</code> to open a new window with your extension loaded.</li> <li>Open <code>Extensions Viewlet</code> and check your extensions are installed.</li> </ul>"},{"location":"CONTRIBUTING/#make-changes","title":"Make changes","text":"<ul> <li>You can relaunch the extension from the debug toolbar after making changes to the files listed above.</li> <li>You can also reload (<code>Ctrl+R</code> or <code>Cmd+R</code> on Mac) the VS Code window with your extension to load your changes.</li> </ul> <p>If you want to add another task, follow the how to add directions</p>"},{"location":"CONTRIBUTING/#install-your-extension","title":"Install your extension","text":"<ul> <li>To create your extension package run <code>vsce package</code></li> <li>To start using your extension with Visual Studio Code</li> </ul> <p><code>code --install-extension ament-task-provider-0.1.5.vsix</code></p> <ul> <li>To share your extension with the world, read on https://code.visualstudio.com/docs about publishing an extension.</li> </ul>"},{"location":"CONTRIBUTING/#any-contributions-you-make-will-be-under-the-apache-software-license","title":"Any contributions you make will be under the Apache Software License","text":"<p>In short, when you submit code changes, your submissions are understood to be under the same Apache License that covers the project. Feel free to contact the maintainers if that's a concern.</p>"},{"location":"CONTRIBUTING/#report-bugs-using-githubs-issues","title":"Report bugs using Github's issues","text":"<p>We use GitHub issues to track public bugs. Report a bug by opening a new issue; it's that easy!</p> <p>Write bug reports with detail, background, and sample code</p> <p>Great Bug Reports tend to have:</p> <ul> <li>A quick summary and/or background</li> <li>Steps to reproduce</li> <li>Be specific!</li> <li>Give sample code if you can.</li> <li>What you expected would happen</li> <li>What actually happens</li> <li>Notes (possibly including why you think this might be happening, or stuff you tried that didn't work)</li> </ul> <p>People love thorough bug reports. I'm not even kidding.</p>"},{"location":"CONTRIBUTING/#use-a-consistent-coding-style","title":"Use a Consistent Coding Style","text":"<p>I'm using prettier to enforce styling. If you open this repository in VSCode using the dev container, everything should be set up for your already </p>"},{"location":"LICENSE/","title":"LICENSE","text":"<pre><code>                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n</code></pre> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li> <p>Definitions.</p> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> </li> <li> <p>Grant of Copyright License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       copyright license to reproduce, prepare Derivative Works of,       publicly display, publicly perform, sublicense, and distribute the       Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       (except as stated in this section) patent license to make, have made,       use, offer to sell, sell, import, and otherwise transfer the Work,       where such license applies only to those patent claims licensable       by such Contributor that are necessarily infringed by their       Contribution(s) alone or by combination of their Contribution(s)       with the Work to which such Contribution(s) was submitted. If You       institute patent litigation against any entity (including a       cross-claim or counterclaim in a lawsuit) alleging that the Work       or a Contribution incorporated within the Work constitutes direct       or contributory patent infringement, then any patent licenses       granted to You under this License for that Work shall terminate       as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the       Work or Derivative Works thereof in any medium, with or without       modifications, and in Source or Object form, provided that You       meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,       any Contribution intentionally submitted for inclusion in the Work       by You to the Licensor shall be under the terms and conditions of       this License, without any additional terms or conditions.       Notwithstanding the above, nothing herein shall supersede or modify       the terms of any separate license agreement you may have executed       with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade       names, trademarks, service marks, or product names of the Licensor,       except as required for reasonable and customary use in describing the       origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or       agreed to in writing, Licensor provides the Work (and each       Contributor provides its Contributions) on an \"AS IS\" BASIS,       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       implied, including, without limitation, any warranties or conditions       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A       PARTICULAR PURPOSE. You are solely responsible for determining the       appropriateness of using or redistributing the Work and assume any       risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,       whether in tort (including negligence), contract, or otherwise,       unless required by applicable law (such as deliberate and grossly       negligent acts) or agreed to in writing, shall any Contributor be       liable to You for damages, including any direct, indirect, special,       incidental, or consequential damages of any character arising as a       result of this License or out of the use or inability to use the       Work (including but not limited to damages for loss of goodwill,       work stoppage, computer failure or malfunction, or any and all       other commercial damages or losses), even if such Contributor       has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing       the Work or Derivative Works thereof, You may choose to offer,       and charge a fee for, acceptance of support, warranty, indemnity,       or other liability obligations and/or rights consistent with this       License. However, in accepting such obligations, You may act only       on Your own behalf and on Your sole responsibility, not on behalf       of any other Contributor, and only if You agree to indemnify,       defend, and hold each Contributor harmless for any liability       incurred by, or claims asserted against, such Contributor by reason       of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>APPENDIX: How to apply the Apache License to your work.</p> <pre><code>  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n</code></pre> <p>Copyright [yyyy] [name of copyright owner]</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at</p> <pre><code>   http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.</p>"},{"location":"How-to-Add/","title":"How to add an ament task","text":"<p>Adding an ament linter to the vscode-ament-task-provider repository involves updating adding the linter to available tasks, and adding a problem matcher.</p>"},{"location":"How-to-Add/#add-to-available-tasks","title":"Add to available tasks","text":""},{"location":"How-to-Add/#update-srcamenttaskproviderts","title":"Update src/amentTaskProvider.ts:","text":"<p>This file contains a function that retrieves the available ament tasks. You need to add the new linter to the linters array. For example, if you want to add a linter called my_linter, add the following line to the function:</p> <pre><code>const linters: string[] = ['cpplint', 'cppcheck', 'lint_cmake', 'flake8', 'pep257', 'xmllint', 'my_linter'];\n</code></pre>"},{"location":"How-to-Add/#update-packagejson","title":"Update package.json","text":"<p>This file contains a section that defines the ament task definitions. You need to add the new linter to the <code>taskDefinitions</code> array. For example, if you want to add a linter called my_linter, add the following JSON object to the array:</p> <pre><code>    \"contributes\": {\n        \"taskDefinitions\": [\n            {\n                \"type\": \"ament\",\n                \"required\": [\n                    \"task\"\n                ],\n                \"properties\": {\n                    \"task\": {\n                        \"type\": \"string\",\n                        \"description\": \"The ament linter\",\n                        \"examples\": [\n                            \"cpplint\",\n                            \"cppcheck\",\n                            \"lint_cmake\",\n                            \"flake8\",\n                            \"pep257\",\n                            \"xmllint\",\n                            \"my_linter\"\n                        ]\n                    },\n</code></pre>"},{"location":"How-to-Add/#add-problem-matcher","title":"Add problem matcher","text":""},{"location":"How-to-Add/#update-packagejson_1","title":"Update package.json","text":"<p>This file contains a section that defines how to parse the output of the linter and identify errors. You need to add a new problem matcher for the new linter.</p> <p>Here's an example of a problem matcher for a linter called my_linter:</p> <pre><code>{\n  \"name\": \"ament_my_linter\",\n  \"label\": \"Ament my_linter problem matcher\",\n  \"owner\": \"ament\",\n  \"source\": \"ament_my_linter\",\n  \"applyTo\": \"allDocuments\",\n  \"fileLocation\": \"absolute\",\n  \"severity\": \"error\",\n  \"pattern\": [\n    {\n      \"regexp\": \"^(.+):(\\\\d+):\\\\s+(.+)\\\\[(.+)\\\\]$\",\n      \"file\": 1,\n      \"line\": 2,\n      \"message\": 3,\n      \"code\": 4\n    }\n  ]\n}\n</code></pre> <p>You can follow this guide on how to set up a problem matcher</p>"},{"location":"How-to-Add/#update-tests","title":"Update tests","text":"<p>Finally, you need to add some unit tests to make sure the new linter is working correctly. You need to add a new test file or modify an existing one to include tests for the new linter.</p> <p>Tests check that the problem matcher definition matches the output of the linter. To automate this, there is a generation script and helper functions.</p>"},{"location":"How-to-Add/#update-testsdata","title":"update tests/data","text":"<p>Create two new files in the <code>tests/data</code> directory, one for a passing lint check and one for a failing lint check. The filenames should be in the format <code>&lt;linter&gt;_pass.&lt;extension&gt;</code> and <code>&lt;linter&gt;_fail.&lt;extension&gt;</code>, where  is the name of the linter being added and  is the file extension used by the linter (e.g. cpp for C++ files)."},{"location":"How-to-Add/#update-testsdatagensh","title":"Update tests/data/gen.sh","text":"<p>Update the <code>gen.sh</code> script in the <code>tests/data</code> directory to generate the new lint check files. Add a new section for the new linter, and call the fixture_gen function with the appropriate arguments.</p> <pre><code># generate cpplint fixtures\necho \"generating cpplint\"\nfixture_gen ament_cpplint cpplint_pass.cpp cpplint_pass.txt\nfixture_gen ament_cpplint cpplint_fail.cpp cpplint_fail.txt\n\n# generate new linter fixtures\necho \"generating new_linter\"\nfixture_gen ament_new_linter new_linter_pass.&lt;extension&gt; new_linter_pass.txt\nfixture_gen ament_new_linter new_linter_fail.&lt;extension&gt; new_linter_fail.txt\n</code></pre>"},{"location":"How-to-Add/#add-to-fixtures","title":"Add to fixtures","text":"<p>Add the new linter to the fixtures object in tests/fixtures.ts. This object contains the paths to the passing and failing lint check files for each linter.</p> <pre><code>const cpplintOutputSuccess = syncReadFile('./data/cpplint_ok.txt');\nconst cpplintOutputFail = syncReadFile('./data/cpplint_fail.txt');\n// add new linter here\n</code></pre> <pre><code>export const fixtures = {\ncpplintOutputSuccess,\ncpplintOutputFail,\n// add new linter here\n</code></pre>"},{"location":"How-to-Add/#add-to-problem-matcherteststs","title":"Add to problem-matcher.tests.ts","text":"<p>Update the <code>problem-matcher.test.ts</code> file to include tests for the new linter.</p> <pre><code>describe('ament_new_linter problemMatcher', () =&gt; {\nconst matcherName = 'ament_new_linter';\nconst matcherDef = () =&gt; findProblemMatcher(matcherName);\n\nit('exists in package.json', () =&gt; {\nexpect(matcherDef(), `problemMatcher with name ${matcherName}`).to.be.ok;\n});\n\ndescribe('given ament_new_linter output with a failure', () =&gt; {\nconst lines = () =&gt; blobToLines(fixtures.new_linter.fail);\n\nit('has a sequence matching problemMatcher.pattern sequence', () =&gt; {\nexpect(lines()).to.haveAnEntry.matchFirstRegexpOf(matcherDef().pattern);\n});\n});\n\ndescribe('given ament_new_linter output with no failures', () =&gt; {\nconst lines = () =&gt; blobToLines(fixtures.new_linter.pass);\n\nit('does not have a sequence matching problemMatcher.pattern', () =&gt; {\nexpect(lines()).to.not.haveAnEntry.matchFirstRegexpOf(matcherDef().pattern);\n});\n});\n});\n</code></pre>"}]}